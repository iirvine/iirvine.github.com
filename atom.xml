<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[¡ Que Vaya !]]></title>
  <link href="http://iirvine.github.com/atom.xml" rel="self"/>
  <link href="http://iirvine.github.com/"/>
  <updated>2012-08-28T21:04:47-06:00</updated>
  <id>http://iirvine.github.com/</id>
  <author>
    <name><![CDATA[iirvine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weekend Faffery]]></title>
    <link href="http://iirvine.github.com/blog/2012/08/23/weekend-faffery-backbone/"/>
    <updated>2012-08-23T18:54:00-06:00</updated>
    <id>http://iirvine.github.com/blog/2012/08/23/weekend-faffery-backbone</id>
    <content type="html"><![CDATA[<h2>Backbone+Leaflet+Instagram = Instamapstagram</h2>

<iframe style="display: block;margin: 0 auto;" width="640" height='500' src="http://iirvine.github.com/instamapstagram/index.html" frameborder="0"></iframe>


<p>As part of a weekend-long &#8220;clear out the cobwebs&#8221; dive back into backbone, I threw together a little sample app to plot Instagram photos on a map.</p>

<p>Drag the circle to kick off a search, click the little crosshairs to zoom to your location, drag the photo markers themselves to get a better view, etc etc. It&#8217;s missing some basic functionality, like popups for the photos, that I may or may not get around to adding. Uses Stamen&#8217;s beautiful <a href="http://maps.stamen.com/#toner/12/37.7706/-122.3782">toner tiles</a> to a fairly nice effect - I like the counterpoint of the very minimal, black and white-ness of the basemap and interface with the colorful Instagram photos.</p>

<p><a href="http://www.mapgrams.com/">This</a> has been <a href="http://www.mapstagram.com/">done before</a>, most recently by <a href="http://blog.instagram.com/post/29555443184/instagram-3-0-photo-maps-more-weve-been">Instagram itself</a>; all the same, it struck me as a fun little thing I could bang out in a weekend to reinvigorate the backbone portions of my brain.</p>

<p>It was quite a useful excercise - I went into it with the goal of shooting for reusable, modularized components, and ended up having to think very carefully about how that could be achieved using backbone against another library like Leaflet.</p>

<p>By the end of the sprint, some concessions were being made in the interest of seeing every map maker&#8217;s most favorite thing - some points on a map - but I think with a little refactoring it could be a good jumping off point.</p>

<p>It&#8217;s also raised some questions on just how to stuff more functionality into a map driven application without going too crazy on the interface. I like the simplicity of the full screen map - and the fact that with Leaflet it works on mobile devices right out of the box - but that kind of puts an upper limit on just how intricate your interface can get, unless you start getting creative and hiding bits of it in a container. I guess sooner or later I&#8217;ll have to start experimenting with mixing in some other elements, especially since that kind of subview rendering in backbone is something I want to practice, but for now I&#8217;m kind of liking the minimal approach.</p>

<p>The whole excercise has led me to think that Instagram + maps is an interesting combo that would be fun to play around with some more. Off the top of my head, I can see that this app would be quite a bit more useful if it had some notion of time - some way to refine your media searches not just by location but date as well. Then you could do something like drop the circle on a festival you went to last week and see some other photos from it. It&#8217;d also be nice if I could just see all of <em>my</em> photos on a map, maybe with a nice density-visualizing <a href="https://github.com/sunng87/heatcanvas">heatmap</a> or some <a href="https://github.com/danzel/Leaflet.markercluster">clusters</a>. And boy would I really like to play around with their <a href="http://instagram.com/developer/realtime/">realtime API</a>… all in good time I suppose.</p>

<p>Anyway, the code is all on <a href="https://github.com/iirvine/instamapstagram">Github</a> so if you&#8217;ve read this far, feel free to fork away should the spirit take you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ Learning - Implement the Where Operator]]></title>
    <link href="http://iirvine.github.com/blog/2012/08/16/linq-learning-implement-the-where-operator/"/>
    <updated>2012-08-16T17:51:00-06:00</updated>
    <id>http://iirvine.github.com/blog/2012/08/16/linq-learning-implement-the-where-operator</id>
    <content type="html"><![CDATA[<p>I answered a question on StackOverflow a few weeks back with a walkthrough showing how to implement the Where operator yourself, using the language features LINQ is built on.</p>

<p>I&#8217;m certain I stole this example from somewhere but nevertheless, I&#8217;ve used it a couple times to help reduce some of the magical aspects of LINQ for new developers and I like it quite a lot, so I thought I&#8217;d post it here for posterity/eventual cleanup and detail. I leave out quite a bit in this version that could be expanded on, like exactly what &#8220;yield return&#8221; is doing in the final implementation - I may come back and fill that in when I find the time.</p>

<p>Say we&#8217;ve got an array of Things, and we want to write a method to help us figure out which of those Things are awesome. Here&#8217;s one way we could do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">ThingsThatAreAwesome</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">things</span><span class="p">){</span>
</span><span class='line'>    <span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="n">Thing</span> <span class="n">thing</span> <span class="k">in</span> <span class="n">things</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">thing</span><span class="p">.</span><span class="n">IsAwesome</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ret</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">thing</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which we would then call like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">myThings</span><span class="p">;</span>
</span><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">myAwesomeThings</span> <span class="p">=</span> <span class="n">ThingsThatAreAwesome</span><span class="p">(</span><span class="n">myThings</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&#8217;s pretty keen. We&#8217;re just iterating over our list of things, seeing which of them are awesome, and then returning the ones that meet our awesome criteria. But semantically it doesn&#8217;t really do it for us - our awesome filter is so awesome that we want to be able to just walk up to a list of Things and call our operator on it, as if it were an instance method on IEnumerable itself.</p>

<p>And so that&#8217;s where <em>extension methods</em> come in. Through some compiler trickery, they give us the ability to &#8220;extend&#8221; types. So like you said, by putting &#8220;this&#8221; in front of the IEnumerable parameter of our method, we can now walk up to our list of things and ask it to filter itself like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">myAwesomeThings</span> <span class="p">=</span> <span class="n">myThings</span><span class="p">.</span><span class="n">ThingsThatAreAwesome</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>So - that&#8217;s where extension methods fit in. Next is the &#8220;predicate&#8221;.</p>

<p>So we&#8217;ve got our magnificent, awesome filter, and it&#8217;s great, but then we have a brain explosion: with a little bit of abstraction, that method we just wrote could be used to filter <em>anything</em>. Not just lists of Thing objects, and not just filtering on things that are awesome.</p>

<p>Making it work with any type is fairly easy, we just make it a generic operator with <code>IEnumerable&lt;T&gt;</code>, rather than <code>IEnumerable&lt;Thing&gt;</code> - but making it filter on any criteria is trickier. How is the method supposed to know how to filter any type? It obviously can&#8217;t - our calling code will have to <em>tell</em> it exactly what we mean by &#8220;filter&#8221; - what kind of filter we want. And so we give it a second parameter, a function pointer, that expresses just what we&#8217;re after. We&#8217;ll call that our &#8220;predicate&#8221;, which is just a way of saying a chunk of code that returns true or false. When all is said and done, it looks a little like this. We&#8217;ll rename the method to &#8220;Filter&#8221;, since that better expresses what we&#8217;re going for now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Filter</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">predicate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="n">T</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">predicate</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that we&#8217;re not really doing anything different from our Awesome filter method before - we&#8217;re still just iterating over a list, performing some kind of check, and returning the items that pass that check. But we&#8217;ve given ourselves a way for calling code to express exactly what that &#8220;check&#8221; should be.</p>

<p>We&#8217;re basically still only doing two things: iterating over a list, and running <em>some kind of check</em> over every item in that list - the items that pass the check get passed back. Except now the method doesn&#8217;t really know what the check it&#8217;s running looks like - we are telling it, passing that piece of code in as a parameter, our predicate, rather than hard coding it into the method itself. We leave it up to the caller to decide what they want their filtering criteria to be.</p>

<p>So at this point, we&#8217;ve basically got the LINQ Where operator - we can now run queries over any type of collection, all with the same method. If you&#8217;ve not messed around with lambdas yet, don&#8217;t worry about it - just know it&#8217;s a very succinct way of expressing a bit of code, which in this case is telling our filter method what we want to filter on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">myThings</span><span class="p">;</span>
</span><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">Cats</span><span class="p">&gt;</span>  <span class="n">myCats</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">myAwesomeThings</span> <span class="p">=</span> <span class="n">myThings</span><span class="p">.</span><span class="n">Filter</span><span class="p">(</span><span class="n">thing</span> <span class="p">=&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="n">IsAwesome</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">myCrazyCats</span> <span class="p">=</span> <span class="n">myCats</span><span class="p">.</span><span class="n">Filter</span><span class="p">(</span><span class="n">cat</span> <span class="p">=&gt;</span> <span class="n">cat</span><span class="p">.</span><span class="n">IsCrazy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">thing</span> <span class="k">in</span> <span class="n">myAwesomeThings</span><span class="p">){</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;This thing is awesome! {0}&quot;</span><span class="p">,</span> <span class="n">thing</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cat</span> <span class="k">in</span> <span class="n">myCrazyCats</span><span class="p">){</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;This cat is crazy! {0}&quot;</span><span class="p">,</span> <span class="n">cat</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[obligatory octopress metablog post]]></title>
    <link href="http://iirvine.github.com/blog/2012/07/22/obligatory-octopress-metablog-post/"/>
    <updated>2012-07-22T18:04:00-06:00</updated>
    <id>http://iirvine.github.com/blog/2012/07/22/obligatory-octopress-metablog-post</id>
    <content type="html"><![CDATA[<h3>Octopress, YAY.</h3>

<p>Keeping with the tradition of using one of your first posts on your new Octopress blog to blog about how you set up your new Octopress blog, here are some notes.</p>

<p>I&#8217;ve had to do this twice now, both times with some small amount of goofiness, but all in all quite an untroubled installation, considering I know nothing about Jekyll/Ruby and am not git&#8217;s most favorite person in the world. These were my general steps for getting things up and running on a span brankin&#8217; new MacBook Air.</p>

<p>First, install git. Self explanatory, really. Although I did run into some funny business installing Git manually vs through <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, vs some older version that was installed when I downloaded XCode - generally, I&#8217;d recommend just saving yourself some trouble and getting it from Homebrew to begin with.</p>

<p>As an aside: in switching to a new, more professionally aliased GitHub account, git had something of a tantrum and was having difficulty letting go of my old user name. I changed the global git config, which did absolutely nothing. Finally I deleted my old ssh keys, generated new ones, and ran ssh-add, and that seemed to do the trick, so git is off my shit list - <em>for now</em>.</p>

<p>Next was installing <a href="https://github.com/sstephenson/rbenv#section_2">rbenv</a> and <a href="https://github.com/sstephenson/ruby-build">ruby-build</a>. Again, Homebrew to the rescue here. They both installed with pretty much no hassle.</p>

<p>Of note was that I went with rbenv instead of rvm because it seems the latter has fallen out of favor as of late, at least that&#8217;s what I inferred from <a href="https://twitter.com/octopress/status/219423650477129728">this</a> tweet.</p>

<p>Next is setting up your repo on GitHub. If you&#8217;re starting a user site, don&#8217;t do what I did and spend an hour trying to figure out why your repo called &#8220;username&#8221; isn&#8217;t building a proper Github page and is messing up all of Octopress&#8217; rake tasks and generally nothing is working - make a repo named &#8220;username.github.com&#8221;, like you&#8217;re supposed to, otherwise, you&#8217;ll feel really dumb.</p>

<p>Now you&#8217;ll setup your local directory, ie, some folder on your machine called &#8220;MyAwesomeBlog&#8221; - then use rbenv to set the local ruby version to Octopress&#8217; preferred flavor, the esoterically named &#8220;1.9.2-p290&#8221;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv local 1.9.2-p290</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;ll probably tell you that it&#8217;s not been installed yet, silly, which you can do with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 1.9.2-p290 </span></code></pre></td></tr></table></div></figure>


<p>You can check that all is well in ruby-land with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv local</span></code></pre></td></tr></table></div></figure>


<p>Okay, now comes the fun stuff. &#8220;Install&#8221; Octopress by cloning it into the local directory you&#8217;ll be using to house your blog, ie</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git MyAwesomeBlog/</span></code></pre></td></tr></table></div></figure>


<p>All done? Get those delicious dependencies with bundler!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler #if you've not installed it already
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>From this point, it&#8217;s pretty much smooth sailing. Work your way through the <a href="http://octopress.org/docs/">documentation</a>, use the super convenient rake tasks to install the default theme and setup github pages…</p>

<p>Then do a rake generate! Then a rake deploy! Then browse to username.github.com and <em>gaze</em> upon the splendidness of the base, unadorned octopress theme! Then do a happy dance, because everything is working splendidly, and you are obviously splendid, etc etc. (I recommend playing <a href="http://www.youtube.com/watch?v=mwrbOEaJPBY">this song</a> for this part).</p>

<p>Then install a new theme, because rolling with a basic, untouched octopress design is like, so 2011. Update your _config.yml with your name and super clever title and BOOM. You&#8217;re pretty much good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://iirvine.github.com/blog/2012/07/22/hello-world/"/>
    <updated>2012-07-22T17:28:00-06:00</updated>
    <id>http://iirvine.github.com/blog/2012/07/22/hello-world</id>
    <content type="html"><![CDATA[<p>Testing testing&#8230;</p>

<p>Is this thing on?</p>
]]></content>
  </entry>
  
</feed>
